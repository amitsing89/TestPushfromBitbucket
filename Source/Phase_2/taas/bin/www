#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('taas:server');
var http = require('http');
var cluster = require('cluster');
//var dbPoolHandler = require('../bin/dbPool.js');

if (cluster.isMaster) {

  console.log("Master is running", process.pid);
  // Count the machine's CPUs
  var cpuCount = require('os').cpus().length;

  // Create a worker for each CPU
  for (let i = 0; i < cpuCount; i += 1) {
    cluster.fork();
  }

  //listen to any dying worker 
  // cluster.on('exit', function (worker) {

  //   console.log("worker %d died", worker.id);
  //   cluster.fork();

  // })

} else {
  /**
   * Get port from environment and store in Express.
   */
  var app = require('../app');
  var port = normalizePort(process.env.PORT || '5000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * handle graceful shutdown if user presses ctrl+c or kill command
   *  */
  process.on('SIGTERM ', gracefulShutDown);
  process.on('SIGINT', gracefulShutDown);



}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  //to watch for the worker id which has started the process
  console.log('Worked %d running', cluster.worker.id);
}


function gracefulShutDown() {
  console.log("Received kill / ctrl + C signal , shutting down gracefully");

  server.close(function () {
    dbPoolHandler.closePool();
    console.log("Closed out remaining connections");

    process.exit();

  });
}
